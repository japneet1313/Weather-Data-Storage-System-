program code for weather data storage system

#include <iostream>
#include <vector>
#include <string>
#include <iomanip>
using namespace std;

// -------------------- Weather Record ADT --------------------
class WeatherRecord {
public:
    string date;
    string city;
    double temperature;

    WeatherRecord() : date(""), city(""), temperature(0.0) {}
    WeatherRecord(string d, string c, double t) : date(d), city(c), temperature(t) {}
};

// -------------------- Data Storage Class --------------------
class WeatherDataStorage {
private:
    vector<string> cities;
    vector<int> years;
    vector<vector<double>> temperatureData; // 2D array: rows = years, cols = cities
    double sentinel = -9999.0; // Sentinel for sparse data

public:
    // Constructor
    WeatherDataStorage(vector<int> y, vector<string> c) {
        years = y;
        cities = c;
        temperatureData.resize(years.size(), vector<double>(cities.size(), sentinel));
    }

    // Insert new weather record
    void insertRecord(WeatherRecord record) {
        int year = stoi(record.date.substr(6, 4)); // extract year from dd-mm-yyyy
        int rowIndex = getYearIndex(year);
        int colIndex = getCityIndex(record.city);

        if (rowIndex != -1 && colIndex != -1) {
            temperatureData[rowIndex][colIndex] = record.temperature;
            cout << "Inserted: " << record.city << " (" << record.date << ") = " 
                 << record.temperature << "°C\n";
        } else {
            cout << "Invalid city or year.\n";
        }
    }

    // Delete record
    void deleteRecord(string city, int year) {
        int rowIndex = getYearIndex(year);
        int colIndex = getCityIndex(city);

        if (rowIndex != -1 && colIndex != -1) {
            temperatureData[rowIndex][colIndex] = sentinel;
            cout << "Deleted record for " << city << " in " << year << ".\n";
        } else {
            cout << "Record not found.\n";
        }
    }

    // Retrieve data for a city in a specific year
    void retrieveRecord(string city, int year) {
        int rowIndex = getYearIndex(year);
        int colIndex = getCityIndex(city);

        if (rowIndex != -1 && colIndex != -1) {
            double temp = temperatureData[rowIndex][colIndex];
            if (temp != sentinel)
                cout << "Temperature for " << city << " in " << year << ": " << temp << "°C\n";
            else
                cout << "No data available for " << city << " in " << year << ".\n";
        } else {
            cout << "Invalid city or year.\n";
        }
    }

    // Populate the array with data (for demo)
    void populateArray() {
        cout << "\nPopulating array with sample data...\n";
        insertRecord(WeatherRecord("01-01-2024", "Delhi", 25.3));
        insertRecord(WeatherRecord("01-01-2024", "Mumbai", 30.1));
        insertRecord(WeatherRecord("01-01-2025", "Delhi", 24.5));
        insertRecord(WeatherRecord("01-01-2025", "Mumbai", 29.9));
    }

    // Row-major access
    void rowMajorAccess() {
        cout << "\nRow-Major Access (Year-wise):\n";
        for (size_t i = 0; i < years.size(); ++i) {
            cout << "Year " << years[i] << ": ";
            for (size_t j = 0; j < cities.size(); ++j) {
                cout << setw(8);
                if (temperatureData[i][j] != sentinel)
                    cout << temperatureData[i][j];
                else
                    cout << "N/A";
            }
            cout << "\n";
        }
    }

    // Column-major access
    void columnMajorAccess() {
        cout << "\nColumn-Major Access (City-wise):\n";
        for (size_t j = 0; j < cities.size(); ++j) {
            cout << "City " << cities[j] << ": ";
            for (size_t i = 0; i < years.size(); ++i) {
                cout << setw(8);
                if (temperatureData[i][j] != sentinel)
                    cout << temperatureData[i][j];
                else
                    cout << "N/A";
            }
            cout << "\n";
        }
    }

    // Handle sparse data
    void handleSparseData() {
        cout << "\nSparse Data Handling:\n";
        for (size_t i = 0; i < years.size(); ++i) {
            for (size_t j = 0; j < cities.size(); ++j) {
                if (temperatureData[i][j] == sentinel)
                    cout << "Missing data for " << cities[j] << " in " << years[i] << ".\n";
            }
        }
    }

    // Analyze complexity (theoretical)
    void analyzeComplexity() {
        cout << "\nComplexity Analysis:\n";
        cout << "Insert: O(1) [direct index access]\n";
        cout << "Delete: O(1)\n";
        cout << "Retrieve: O(1)\n";
        cout << "Space: O(n * m) where n = years, m = cities\n";
    }

private:
    int getYearIndex(int year) {
        for (size_t i = 0; i < years.size(); ++i)
            if (years[i] == year)
                return i;
        return -1;
    }

    int getCityIndex(string city) {
        for (size_t i = 0; i < cities.size(); ++i)
            if (cities[i] == city)
                return i;
        return -1;
    }
};

// -------------------- Main Function --------------------
int main() {
    vector<int> years = {2024, 2025};
    vector<string> cities = {"Delhi", "Mumbai"};

    WeatherDataStorage storage(years, cities);
    storage.populateArray();

    storage.rowMajorAccess();
    storage.columnMajorAccess();

    storage.retrieveRecord("Delhi", 2024);
    storage.deleteRecord("Delhi", 2024);
    storage.retrieveRecord("Delhi", 2024);

    storage.handleSparseData();
    storage.analyzeComplexity();

    return 0;
}
